===============
1. Introduction
===============
	JVMON is a Java Virtual Machine(JVM) platform monitoring tool. 

============
1.1 Features
============
	- gathers metrics about memory pools(heap & non-heap), classes, threads, garbage collectors
	- no need to configure or enable anything on target JVM which makes it ideal for monitoring production/running JVMs
	- saves all the collected metrics in csv format and js format
	- rotates csv files every 24 hours
	- automatically creates graphs for all the collected metrics using integrated web server component

================
1.2 Requirements
================
JVMs
	Hotspot (32-bit and 64-bit)
	JRockit (32-bit and 64-bit)

JDK
	JDK 1.6+
	JDK 1.6+ equivalent of JRockit

========================
2. Install and Configure
========================

1. Download the latest jvmon binary file [https://github.com/downloads/uglyhunk/jvmon/jvmon_5Aug11_2159.zip](https://github.com/downloads/uglyhunk/jvmon/jvmon_5Aug11_2159.zip)

2. Extract it to your local hard drive.
 e.g.:
 Windows - **C:\jvmon**
 Non-Windows - **/usr/local/jvmon**

3. Set JVMON_HOME
 For Windows, set the system environment variable **JVMON_HOME=C:\jvmon**
 For Non-Windows, edit **setenv.sh** script in the bin directory of jvmon and assign correct jvmon path to **JVMON_HOME** variable

4. Set JDK_HOME
Edit **setenv.cmd or setenv.sh** in the bin directory of jvmon and set JDK_HOME to the one that the target JVMs use.


======================
3. Directory structure
======================

JVMON_HOME\(e.g. - C:\jvmon)
|
|__ bin\ - contains all the scripts for monitoring select JVMs, querying running JVMs and converting reports.
|
|__ lib\ - jar files for jvmon and Nano Web Server
|
|__ jvmon_plotter\ - document root for jvm reports that will be used by nano web server
|
|__ logs\- directory for all the logs files and data files created by jvmon and nano web server

========
4. Usage
========

==============
4.1 Query JVMs
==============
- To find all the running JVMs running in your system, execute the following script

	queryJVMs.cmd
	./queryJVMs.sh

- To find all the JVMs running as Windows service, execute the following script
 
	queryJVMSvcs.cmd

From the output, make a note of the description in "Display Name" column for the JVMs to be monitored. This description becomes arg4 in monitoring scripts.

================
4.2 Monitor JVMs
================

- To monitor running JVMs, use the following script

	monJVMs.cmd
	monJVMs.sh

- To monitor JVMs running as Windows service, use the following script

	monJVMSvcs.cmd

Following are the arguments that can be edited to customize JVM monitoring

arg1 - f / b / c
	f - collected metrics is saved only to csv file
	b - collected metrics is shown on console in addition to being saved to csv file

	By default, only heap and non-heap metrics will be displayed on console. To customize what to display 
	on console, add context to 'b' as follows

	b:m - displays memory (heap/non-heap) metrics
	b:c - displays class metrics
	b:t - displays thread metrics
	b:n - displays compilation metrics
	b:o - displays garbage collector and memory pool (heap & non-heap) metrics	

arg2 - integer - frequency in seconds between each collection

arg3 - integer - total number of collections

arg4 - desc1,desc2,... - VM description string that JVMON search for and monitors if found. Multiple VM description 
						 strings can be separated by a comma. VM description information is available from 
						 querying scripts (Refer to section Querying JVMs)

arg5 - integer - frequency in seconds between for each scan for new JVMs matching arg4

=================	
5. Display graphs
=================

You can see all the graphs immediately after the monitoring session is completed. Run "Nano Web Server" that comes with jvmon using the following script

	nws.cmd
	./nws.sh

Note: If the jvmon is killed while monitoring is in progress, csv output has to be manually converted to js format (refer to section Manually convert CSV output to JS format)

===========================================
6. Manually convert CSV output to JS format
===========================================

If jvmon is killed while monitoring is in progress, you have to manually convert CSV output file to JS format for the jvmon-plotter to be able display graphs in browser.

- Edit the last argument in csv2js.cmd or csv2js.sh to the CSV file name of the last monitoring session. You can find this in the logs directory or on the console output

- Execute csv2js.cmd or csv2js.sh


